/* The following code was generated by JFlex 1.6.1 */

package com.teamwizardry.librarianlib.features.exlang.lexer;

import java.util.LinkedList;
import org.jetbrains.annotations.NotNull;
import net.minecraft.util.ResourceLocation;
import com.teamwizardry.librarianlib.features.exlang.parser.LexerException;
/**
 * This class is a simple example lexer.
 */
@SuppressWarnings("all")

public class ExLangLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO_DEFINITION_IDENTIFIER = 2;
  public static final int MACRO_DEFINITION_PARAMS_OR_BEGIN = 4;
  public static final int MACRO_DEFINITION_PARAM = 6;
  public static final int MACRO_DEFINITION_NEXT_PARAM_OR_END = 8;
  public static final int MACRO_DEFINITION_BEGIN = 10;
  public static final int LANG_BLOCK_OR_VALUE = 12;
  public static final int EXPRESSION = 14;
  public static final int BARE_EXPRESSION = 16;
  public static final int DOUBLE_QUOTED_EXPRESSION = 18;
  public static final int SINGLE_QUOTED_EXPRESSION = 20;
  public static final int MACRO_REFERENCE_PARAMS_OR_END = 22;
  public static final int MACRO_REFERENCE_NEXT_PARAM_OR_END = 24;
  public static final int PATH_BEGIN = 26;
  public static final int PATH_DOUBLE_QUOTE = 28;
  public static final int PATH_SINGLE_QUOTE = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\15\1\5\2\4\1\6\16\10\4\0\1\15\1\0\1\25"+
    "\1\16\1\44\2\0\1\26\1\34\1\36\1\2\1\0\1\35\1\0"+
    "\1\12\1\1\12\43\3\0\1\33\3\0\6\42\13\13\1\3\10\13"+
    "\1\0\1\40\2\0\1\13\1\0\3\42\1\27\1\30\1\31\2\13"+
    "\1\17\3\13\1\20\1\32\1\22\1\21\1\13\1\23\1\13\1\24"+
    "\1\41\5\13\1\37\1\0\1\45\1\0\6\10\1\11\32\10\1\15"+
    "\1\0\4\7\4\0\1\13\2\0\1\10\7\0\1\13\4\0\1\13"+
    "\5\0\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13"+
    "\7\0\1\13\1\0\1\13\21\0\160\14\5\13\1\0\2\13\2\0"+
    "\4\13\1\0\1\12\6\0\1\13\1\0\3\13\1\0\1\13\1\0"+
    "\24\13\1\0\123\13\1\0\213\13\1\0\5\14\2\12\236\13\10\12"+
    "\1\0\46\13\2\0\1\13\7\0\47\13\7\0\1\7\1\0\55\14"+
    "\1\0\1\14\1\0\2\14\1\0\2\14\1\0\1\14\10\0\33\13"+
    "\5\0\3\13\15\0\5\10\6\0\1\7\4\0\13\14\5\0\53\13"+
    "\37\14\4\0\2\13\1\14\143\13\1\0\1\13\7\14\1\10\1\0"+
    "\6\14\2\13\2\14\1\0\4\14\2\13\12\14\3\13\2\0\1\13"+
    "\17\0\1\10\1\13\1\14\36\13\33\14\2\0\131\13\13\14\1\13"+
    "\16\0\12\14\41\13\11\14\2\13\4\0\1\13\5\0\26\13\4\14"+
    "\1\13\11\14\1\13\3\14\1\13\5\14\22\0\31\13\3\14\104\0"+
    "\1\13\1\12\13\13\6\12\61\0\33\14\1\12\4\14\66\13\3\14"+
    "\1\13\22\14\1\13\7\14\12\13\2\14\2\0\12\14\1\0\7\13"+
    "\1\12\7\13\1\12\3\14\1\0\10\13\2\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\1\13\3\0\4\13\2\0\1\14\1\13\7\14"+
    "\2\0\2\14\2\0\3\14\1\13\10\0\1\14\4\0\2\13\1\0"+
    "\3\13\2\14\2\0\12\14\2\13\2\7\7\0\1\7\5\0\3\14"+
    "\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\2\13\1\0\2\13\2\0\1\14\1\0\5\14\4\0\2\14"+
    "\2\0\3\14\3\0\1\14\7\0\4\13\1\0\1\13\7\0\14\14"+
    "\3\13\1\14\13\0\3\14\1\0\11\13\1\0\3\13\1\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\14\1\13\10\14"+
    "\1\0\3\14\1\0\3\14\2\0\1\13\17\0\2\13\2\14\2\0"+
    "\12\14\1\0\1\7\17\0\3\14\1\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\14\1\13"+
    "\7\14\2\0\2\14\2\0\3\14\10\0\2\14\4\0\2\13\1\0"+
    "\3\13\2\14\2\0\12\14\1\0\1\13\20\0\1\14\1\13\1\0"+
    "\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0"+
    "\2\13\3\0\2\13\3\0\3\13\3\0\14\13\4\0\5\14\3\0"+
    "\3\14\1\0\4\14\2\0\1\13\6\0\1\14\16\0\12\14\11\0"+
    "\1\7\6\0\1\12\3\14\1\0\10\13\1\0\3\13\1\0\27\13"+
    "\1\0\12\13\1\12\5\13\3\0\1\13\7\14\1\0\3\14\1\0"+
    "\4\14\7\0\2\14\1\0\2\13\6\0\2\13\2\14\2\0\12\14"+
    "\21\0\1\12\2\14\1\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\12\13\1\0\5\13\2\0\1\14\1\13\7\14\1\0\3\14\1\0"+
    "\4\14\7\0\2\14\7\0\1\13\1\0\2\13\2\14\2\0\12\14"+
    "\1\0\2\13\16\0\1\12\2\14\1\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\7\14\1\0\3\14\1\0\4\14\1\13\10\0"+
    "\1\14\10\0\2\13\2\14\2\0\12\14\12\0\6\13\2\0\2\14"+
    "\1\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13"+
    "\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14\6\0\12\12"+
    "\2\0\2\14\15\0\60\13\1\14\2\13\7\14\4\0\1\7\7\13"+
    "\10\14\1\0\12\14\47\0\2\13\1\0\1\13\2\0\2\13\1\0"+
    "\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13\1\0"+
    "\1\13\1\0\1\13\2\0\2\13\1\0\4\13\1\14\2\13\6\14"+
    "\1\0\2\14\1\13\2\0\5\13\1\0\1\13\1\0\6\14\2\0"+
    "\12\14\2\0\4\13\40\0\1\13\27\0\2\14\6\0\12\14\13\0"+
    "\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\13\1\0\44\13"+
    "\4\0\24\14\1\0\2\14\5\13\13\14\1\0\44\14\11\0\1\14"+
    "\71\0\53\13\24\14\1\13\12\14\6\0\6\13\4\14\4\13\3\14"+
    "\1\13\3\14\2\13\7\14\3\13\4\14\15\13\14\14\1\13\17\14"+
    "\2\0\46\13\1\0\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\51\13"+
    "\1\0\4\13\2\0\41\13\1\0\4\13\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\2\0\17\13\1\0\71\13\1\0\4\13\2\0\103\13"+
    "\2\0\3\14\40\0\20\13\20\0\125\13\14\0\u026c\13\2\0\21\13"+
    "\1\15\32\13\5\0\113\13\3\0\3\13\10\12\7\0\15\13\1\0"+
    "\4\13\3\14\13\0\22\13\3\14\13\0\22\13\2\14\14\0\15\13"+
    "\1\0\3\13\1\0\2\14\14\0\64\13\40\14\3\0\1\13\3\0"+
    "\1\7\1\13\1\14\2\0\12\14\41\0\3\14\2\0\12\14\6\0"+
    "\130\13\10\0\51\13\1\14\1\13\5\0\106\13\12\0\35\13\2\12"+
    "\1\0\14\14\4\0\14\14\12\0\12\14\36\13\2\0\5\13\13\0"+
    "\54\13\4\0\21\14\7\13\2\14\6\0\12\14\46\0\27\13\5\14"+
    "\4\0\65\13\12\14\1\0\35\14\2\0\13\14\6\0\12\14\15\0"+
    "\1\13\10\0\17\12\101\0\5\14\57\13\21\14\7\13\4\0\12\14"+
    "\21\0\11\14\14\0\3\14\36\13\15\14\2\13\12\14\54\13\16\14"+
    "\14\0\44\13\24\14\10\0\12\14\3\0\3\13\12\14\44\13\122\0"+
    "\3\14\1\0\25\14\4\13\1\14\4\13\3\14\2\13\1\0\2\12"+
    "\6\0\300\13\47\14\17\12\6\0\4\14\u0116\13\2\0\6\13\2\0"+
    "\46\13\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0"+
    "\3\13\1\0\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0"+
    "\3\13\1\0\7\13\3\0\13\15\5\10\30\0\2\4\5\10\1\15"+
    "\17\0\2\13\23\0\1\13\12\0\1\15\5\10\5\0\6\10\1\0"+
    "\1\13\15\0\1\13\20\0\15\13\3\0\33\7\25\0\15\14\4\12"+
    "\1\14\3\12\14\14\21\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\21\0"+
    "\51\13\u032d\0\64\12\u0716\0\57\13\1\0\57\13\1\0\205\13\6\0"+
    "\4\13\3\14\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0"+
    "\70\13\7\0\1\13\17\0\1\14\27\13\11\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\40\14\57\0\1\13\u01d0\0\1\15\4\0\3\13"+
    "\31\0\11\13\6\14\1\0\5\13\2\0\5\13\4\0\126\13\2\0"+
    "\2\14\2\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0"+
    "\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0"+
    "\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13\12\14\2\13\24\0"+
    "\57\13\1\14\3\12\1\0\12\14\1\0\31\13\6\12\1\0\1\14"+
    "\120\13\2\14\45\0\11\13\2\0\147\13\2\0\4\13\1\0\4\13"+
    "\14\12\13\13\3\12\2\0\2\12\105\0\1\12\12\13\1\14\3\13"+
    "\1\14\4\13\1\14\27\13\5\14\20\0\1\7\7\0\64\13\14\0"+
    "\2\14\62\13\21\14\13\0\12\14\6\0\22\14\6\13\3\0\1\13"+
    "\4\0\12\14\34\13\10\14\2\0\27\13\15\14\14\0\35\13\3\0"+
    "\4\14\57\13\16\14\16\0\1\13\12\14\6\0\37\12\1\0\51\13"+
    "\16\14\11\0\3\13\1\14\10\13\2\14\2\0\12\14\6\0\27\13"+
    "\3\0\1\13\1\14\4\12\60\13\1\14\1\13\3\14\2\13\2\14"+
    "\5\13\2\14\1\13\1\14\1\13\30\0\3\13\2\0\13\13\5\14"+
    "\2\0\3\13\2\14\12\0\6\13\2\0\6\13\2\0\6\13\11\0"+
    "\7\13\1\0\7\13\1\0\53\12\1\0\4\12\4\0\2\12\132\0"+
    "\43\13\10\14\1\0\2\14\2\0\12\14\6\0\u2ba4\13\14\0\27\13"+
    "\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0\5\13"+
    "\5\0\1\13\1\14\12\13\1\0\15\13\1\0\5\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13"+
    "\2\0\66\13\50\0\14\13\1\7\3\0\20\14\20\0\7\14\7\12"+
    "\5\0\2\13\30\0\3\13\31\0\1\7\6\0\5\13\1\0\207\13"+
    "\2\0\1\10\4\0\1\7\13\0\12\14\7\0\32\13\4\0\1\13"+
    "\1\0\32\13\13\0\131\13\3\0\6\13\2\0\6\13\2\0\6\13"+
    "\2\0\3\13\3\0\2\7\3\0\2\7\22\0\3\10\4\0\14\13"+
    "\1\0\32\13\1\0\23\13\1\0\2\13\1\0\17\13\2\0\16\13"+
    "\42\0\173\13\105\0\65\13\210\0\1\14\202\0\35\13\3\0\61\13"+
    "\17\0\1\12\37\0\37\13\1\12\20\0\33\13\5\0\53\12\5\0"+
    "\36\13\2\0\44\13\4\0\10\13\1\0\5\13\52\0\236\13\2\0"+
    "\12\14\126\0\50\12\10\0\64\12\234\0\u0137\12\11\0\26\12\12\0"+
    "\10\12\230\0\6\13\2\0\1\13\1\0\54\13\1\0\2\13\3\0"+
    "\1\13\2\0\27\13\12\0\27\12\11\0\37\12\141\0\26\13\12\0"+
    "\32\13\106\0\70\13\6\0\2\13\100\0\1\13\3\14\1\0\2\14"+
    "\5\0\4\14\4\13\1\0\3\13\1\0\33\13\4\0\3\14\4\0"+
    "\1\14\40\0\35\13\3\0\35\12\43\0\10\12\1\0\36\12\31\0"+
    "\66\13\12\0\26\13\12\0\23\13\15\0\22\12\156\0\111\13\u03b7\0"+
    "\3\14\65\13\17\14\37\0\12\14\17\0\1\12\3\14\55\13\13\14"+
    "\2\0\1\10\22\0\31\13\7\0\12\14\6\0\3\14\44\13\16\14"+
    "\1\0\12\14\20\0\44\12\2\0\1\12\11\0\3\14\60\13\16\14"+
    "\4\13\13\0\12\14\1\12\45\0\22\12\1\0\45\12\170\0\73\12"+
    "\5\0\12\12\7\0\3\12\1\0\10\12\2\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\11\12\2\0\2\12"+
    "\2\0\3\12\11\0\1\12\5\0\7\12\2\0\7\12\3\0\5\12"+
    "\u010b\0\106\12\1\0\1\12\10\0\12\12\246\0\66\12\2\0\11\12"+
    "\77\0\101\12\3\0\1\12\13\0\12\12\46\0\53\13\15\14\10\0"+
    "\12\14\u01d6\0\112\12\25\0\1\12\u01c0\0\71\12\u0507\0\u036f\13\52\12"+
    "\147\0\143\13\14\12\u0b91\0\u042f\13\u33d1\0\u0239\13\7\0\37\12\1\0"+
    "\12\12\146\0\36\12\2\0\5\12\13\0\67\12\11\0\4\12\14\0"+
    "\12\12\11\0\25\12\5\0\23\12\u0370\0\105\13\13\0\1\13\56\14"+
    "\20\0\4\14\15\13\u4060\0\2\13\u0bfe\0\153\12\5\0\15\12\3\0"+
    "\11\12\7\0\12\12\3\0\2\12\u14c6\0\5\14\3\0\6\14\10\10"+
    "\10\14\2\0\7\14\36\0\4\14\224\0\3\14\u01bb\0\125\13\1\0"+
    "\107\13\1\0\2\13\2\0\1\13\2\0\2\13\2\0\4\13\1\0"+
    "\14\13\1\0\1\13\1\0\7\13\1\0\101\13\1\0\4\13\2\0"+
    "\10\13\1\0\7\13\1\0\34\13\1\0\4\13\1\0\5\13\1\0"+
    "\1\13\3\0\7\13\1\0\u0154\13\2\0\31\13\1\0\31\13\1\0"+
    "\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0"+
    "\31\13\1\0\37\13\1\0\31\13\1\0\10\13\2\0\62\14\u1000\0"+
    "\305\12\13\0\7\12\u0529\0\4\13\1\0\33\13\1\0\2\13\1\0"+
    "\1\13\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0"+
    "\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\3\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\2\13\1\0\1\13\2\0"+
    "\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\0\21\13\5\0\3\13\1\0\5\13\1\0\21\13\u0274\0"+
    "\32\12\6\0\32\12\6\0\32\12\u0e76\0\ua6d7\13\51\0\u1035\13\13\0"+
    "\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\2\1\1\2\1\0\1\3\1\1\1\4\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\1"+
    "\1\14\1\15\1\16\2\17\1\20\1\0\1\21\2\16"+
    "\2\0\2\16\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\1\3\0\3\32\1\33\1\0\2\34"+
    "\1\32\1\0\1\34\6\0\1\35\4\0\1\36\1\1"+
    "\5\0\1\37\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u0286\0\u02d2\0\u02ac\0\u02f8\0\u02f8"+
    "\0\u02ac\0\u02ac\0\u031e\0\u031e\0\u02ac\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u0344\0\u02ac\0\u02ac\0\u036a\0\u02ac\0\u0390\0\u02ac\0\u03b6"+
    "\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u02ac"+
    "\0\u04e6\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u02ac\0\u044e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0428\0\u044e\0\u0616\0\u0616\0\u04c0\0\u04e6\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u0616\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u02ac\0\u0532\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u02ac\0\u02ac\0\u02ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\21\1\0\1\22\3\23\2\0\1\23\3\24"+
    "\1\23\1\25\6\24\2\0\4\24\4\0\1\26\1\0"+
    "\3\24\3\0\1\21\1\0\1\27\3\23\1\30\1\0"+
    "\1\23\1\0\1\30\1\0\1\23\1\0\6\30\2\0"+
    "\4\30\6\0\2\30\1\0\1\30\2\0\1\21\1\0"+
    "\4\23\2\0\1\23\3\0\1\23\15\0\1\31\1\32"+
    "\12\0\1\21\1\0\1\33\3\23\1\34\1\0\1\23"+
    "\1\0\1\34\1\0\1\23\1\0\6\34\2\0\4\34"+
    "\6\0\2\34\1\0\1\34\2\0\1\21\1\0\4\23"+
    "\2\0\1\23\3\0\1\23\17\0\1\35\1\36\10\0"+
    "\1\21\1\0\4\23\2\0\1\23\3\0\1\23\15\0"+
    "\1\31\13\0\1\21\1\0\4\23\2\0\1\23\3\0"+
    "\1\23\15\0\1\37\3\0\1\26\6\0\4\40\3\41"+
    "\2\40\1\41\3\40\1\41\7\40\1\42\1\43\17\40"+
    "\5\44\1\45\1\46\26\44\1\47\2\44\1\50\3\44"+
    "\1\51\1\44\4\52\1\53\2\54\2\52\1\53\13\52"+
    "\1\45\7\52\1\47\2\52\1\55\3\52\1\51\1\52"+
    "\4\56\1\57\2\54\2\56\1\57\14\56\1\45\6\56"+
    "\1\47\2\56\1\55\3\56\1\51\1\56\4\60\3\61"+
    "\2\60\1\61\3\60\1\61\16\60\1\62\11\60\1\0"+
    "\1\21\1\0\4\23\2\0\1\23\3\0\1\23\17\0"+
    "\1\63\1\64\10\0\1\21\1\0\4\23\2\0\1\23"+
    "\3\0\1\23\7\0\1\65\1\66\17\0\5\67\2\0"+
    "\16\67\1\70\25\67\2\0\17\67\1\70\17\67\1\0"+
    "\1\71\1\72\46\0\1\24\6\0\3\24\2\0\6\24"+
    "\2\0\4\24\6\0\3\24\67\0\1\73\7\0\1\74"+
    "\21\0\1\30\3\0\3\30\1\0\2\30\2\0\6\30"+
    "\2\0\4\30\6\0\4\30\4\0\1\34\3\0\3\34"+
    "\1\0\2\34\2\0\6\34\2\0\4\34\6\0\4\34"+
    "\5\0\3\41\2\0\1\41\3\0\1\41\30\0\5\44"+
    "\2\0\26\44\1\0\2\44\1\0\3\44\1\0\1\44"+
    "\5\0\1\45\40\0\4\75\1\76\2\54\2\75\1\76"+
    "\27\75\1\77\4\75\3\0\1\100\3\0\1\100\3\0"+
    "\1\100\3\0\6\100\2\0\4\100\4\0\1\101\1\0"+
    "\2\100\1\0\1\100\1\0\5\52\2\0\16\52\1\0"+
    "\7\52\1\0\2\52\1\0\3\52\1\0\5\52\1\102"+
    "\2\103\2\52\1\102\3\52\1\102\7\52\1\0\7\52"+
    "\1\0\2\52\1\0\3\52\1\0\1\52\4\0\3\103"+
    "\2\0\1\103\3\0\1\103\30\0\4\75\1\104\2\105"+
    "\2\75\1\104\27\75\1\77\4\75\5\56\2\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\3\56\1\0\5\56"+
    "\1\106\2\103\2\56\1\106\3\56\1\106\10\56\1\0"+
    "\6\56\1\0\2\56\1\0\3\56\1\0\1\56\4\0"+
    "\3\107\2\0\1\107\3\0\1\107\16\0\1\62\11\0"+
    "\3\71\1\0\42\71\2\72\1\110\43\72\20\0\1\111"+
    "\55\0\1\112\44\0\3\113\10\0\2\113\5\0\1\100"+
    "\3\0\3\100\1\0\2\100\2\0\6\100\2\0\4\100"+
    "\6\0\4\100\4\0\1\114\3\0\1\114\3\0\1\114"+
    "\3\0\6\114\2\0\4\114\6\0\2\114\1\0\1\114"+
    "\5\0\3\115\2\0\1\115\3\0\1\115\30\0\1\72"+
    "\1\23\1\116\43\72\21\0\1\117\55\0\1\120\43\0"+
    "\3\121\10\0\2\121\5\0\1\114\3\0\3\114\1\0"+
    "\2\114\2\0\6\114\2\0\4\114\6\0\4\114\1\122"+
    "\1\72\1\123\1\110\43\72\22\0\1\124\42\0\1\125"+
    "\55\0\3\126\10\0\2\126\25\0\1\127\54\0\1\130"+
    "\42\0\3\131\10\0\2\131\26\0\1\132\51\0\1\133"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\1\1\11\1\1\1\0\1\11\2\1\2\11"+
    "\2\1\4\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\0\3\1\2\0\2\1\1\11\1\1\7\11\1\1"+
    "\3\0\1\11\3\1\1\0\3\1\1\0\1\1\6\0"+
    "\1\1\4\0\1\11\1\1\5\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ResourceLocation file = new ResourceLocation("missingno");

    private ExLangToken lastSuccessfulToken = null;
    private ExLangToken peekedToken = null;

    public @NotNull ExLangToken nextToken() throws java.io.IOException {
        if(peekedToken != null) {
            ExLangToken token = peekedToken;
            peekedToken = null;
            return token;
        } else {
            lastSuccessfulToken = errorLex();
            return lastSuccessfulToken;
        }
    }

    public @NotNull ExLangToken peekToken() throws java.io.IOException {
        if(peekedToken == null) {
            peekedToken = errorLex();
            lastSuccessfulToken = peekedToken;
        }
        return peekedToken;
    }

    private ExLangToken errorLex() {
        try {
            return yylex();
        } catch (Throwable e) {
            throw new LexerException("Error getting next token.", lastSuccessfulToken, e);
        }
    }

    private LinkedList<Integer> stateStack = new LinkedList<>();

    private ExLangToken symbol(ExLangSymbol type) {
        return new ExLangToken(type, file, yyline, yycolumn, "");
    }
    private ExLangToken symbol(ExLangSymbol type, String value) {
        return new ExLangToken(type, file, yyline, yycolumn, value);
    }

    private void pushState() {
        stateStack.push(yystate());
    }

    private void pushState(int state) {
        stateStack.push(state);
    }

    private void popState() {
        if(!stateStack.isEmpty()) {
            yybegin(stateStack.pop());
        }
    }

    private boolean _expressionEndOnComma = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ExLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ExLangToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return symbol(ExLangSymbol.BLOCK_END);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 34: break;
          case 2: 
            { yybegin(LANG_BLOCK_OR_VALUE);
    return symbol(ExLangSymbol.LANG_KEY, yytext());
            }
          case 35: break;
          case 3: 
            { yybegin(YYINITIAL); // blocks parse identically to the root, any difference is handled in the parser
        return symbol(ExLangSymbol.BLOCK_BEGIN);
            }
          case 36: break;
          case 4: 
            { yybegin(MACRO_DEFINITION_PARAMS_OR_BEGIN);
    return symbol(ExLangSymbol.IDENTIFIER, yytext());
            }
          case 37: break;
          case 5: 
            { pushState(YYINITIAL);
        yybegin(EXPRESSION);
            }
          case 38: break;
          case 6: 
            { yybegin(MACRO_DEFINITION_PARAM);
        return symbol(ExLangSymbol.MACRO_DEFINITION_PARAMS_BEGIN);
            }
          case 39: break;
          case 7: 
            { yybegin(MACRO_DEFINITION_NEXT_PARAM_OR_END);
    return symbol(ExLangSymbol.IDENTIFIER, yytext());
            }
          case 40: break;
          case 8: 
            { yybegin(MACRO_DEFINITION_PARAM);
            }
          case 41: break;
          case 9: 
            { yybegin(MACRO_DEFINITION_BEGIN);
        return symbol(ExLangSymbol.MACRO_DEFINITION_PARAMS_END);
            }
          case 42: break;
          case 10: 
            { pushState(YYINITIAL);
        yybegin(EXPRESSION);
        return symbol(ExLangSymbol.EXPRESSION_BEGIN);
            }
          case 43: break;
          case 11: 
            { yypushback(1);
        yybegin(BARE_EXPRESSION);
        return symbol(ExLangSymbol.EXPRESSION_BEGIN);
            }
          case 44: break;
          case 12: 
            { yybegin(DOUBLE_QUOTED_EXPRESSION);
        return symbol(ExLangSymbol.EXPRESSION_BEGIN);
            }
          case 45: break;
          case 13: 
            { yybegin(SINGLE_QUOTED_EXPRESSION);
        return symbol(ExLangSymbol.EXPRESSION_BEGIN);
            }
          case 46: break;
          case 14: 
            { return symbol(ExLangSymbol.STRING, yytext());
            }
          case 47: break;
          case 15: 
            { _expressionEndOnComma = false;

        popState();
        return symbol(ExLangSymbol.EXPRESSION_END);
            }
          case 48: break;
          case 16: 
            { if(_expressionEndOnComma) {
            _expressionEndOnComma = false;
            yypushback(1);

            popState();
            return symbol(ExLangSymbol.EXPRESSION_END);
        } else {
            return symbol(ExLangSymbol.STRING, ",");
        }
            }
          case 49: break;
          case 17: 
            { return symbol(ExLangSymbol.STRING, "$");
            }
          case 50: break;
          case 18: 
            { popState();
            }
          case 51: break;
          case 19: 
            { pushState(MACRO_REFERENCE_NEXT_PARAM_OR_END);

        _expressionEndOnComma = true;
        yybegin(EXPRESSION);
        return symbol(ExLangSymbol.MACRO_REFERENCE_PARAMS_BEGIN);
            }
          case 52: break;
          case 20: 
            { pushState();

        _expressionEndOnComma = true;
        yybegin(EXPRESSION);
            }
          case 53: break;
          case 21: 
            { popState();
        return symbol(ExLangSymbol.MACRO_REFERENCE_PARAMS_END);
            }
          case 54: break;
          case 22: 
            { yybegin(PATH_DOUBLE_QUOTE);
            }
          case 55: break;
          case 23: 
            { yybegin(PATH_SINGLE_QUOTE);
            }
          case 56: break;
          case 24: 
            { return symbol(ExLangSymbol.PATH_COMPONENT, yytext());
            }
          case 57: break;
          case 25: 
            { yybegin(YYINITIAL);
        return symbol(ExLangSymbol.PATH_END);
            }
          case 58: break;
          case 26: 
            { return symbol(ExLangSymbol.ESCAPED_CHARACTER, yytext().substring(1));
            }
          case 59: break;
          case 27: 
            { pushState();
        yybegin(MACRO_REFERENCE_PARAMS_OR_END);
        return symbol(ExLangSymbol.MACRO_REFERENCE, yytext().substring(1));
            }
          case 60: break;
          case 28: 
            { return symbol(ExLangSymbol.STRING, yytext().replaceAll("\n\\s+", "\n"));
            }
          case 61: break;
          case 29: 
            { return symbol(ExLangSymbol.STRING, yytext().replaceAll("\n\\s+", ""));
            }
          case 62: break;
          case 30: 
            { pushState();
        yybegin(MACRO_REFERENCE_PARAMS_OR_END);
        return symbol(ExLangSymbol.MACRO_REFERENCE, yytext().substring(2, yytext().length()-1));
            }
          case 63: break;
          case 31: 
            { return symbol(ExLangSymbol.ESCAPED_CODEPOINT, yytext().substring(2));
            }
          case 64: break;
          case 32: 
            { yybegin(PATH_BEGIN);
    return symbol(ExLangSymbol.IMPORT_BEGIN);
            }
          case 65: break;
          case 33: 
            { yybegin(MACRO_DEFINITION_IDENTIFIER);
    return symbol(ExLangSymbol.MACRO_DEFINE);
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
