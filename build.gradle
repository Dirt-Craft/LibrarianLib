buildscript {
    ext.kotlin_version = '1.0.2'
    ext.dokka_version = '0.9.9'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}


apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'
apply plugin: 'maven'

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}.${config.build_number}"
group = config.group
archivesBaseName = config.mod_name

repositories {
    maven {
        url "http://maven.amadornes.com/"
    }
    maven {
        url "http://mvn.rx14.co.uk/shadowfacts/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven/'
    }
}

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"
    mappings = config.mc_mappings

    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'LibMisc.kt'
}

configurations {

    required
    compile.extendsFrom(required)
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //required "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //required 'com.github.Eladkay:Mixin:-SNAPSHOT'
    compile 'org.spongepowered:mixin:0.6.8-SNAPSHOT'

    compile "net.shadowfacts:Forgelin:1.3.1"
    deobfCompile "MCMultiPart:MCMultiPart:1.2.1:universal"
}

jar {
    // We need to make sure we package kotlin runtimes.

    archiveName "${archivesBaseName}-${version}.jar"
    dependsOn configurations.compile
    from {
        configurations.required.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'FMLAT': 'librarianlib_at.cfg'
        //todo add fmlloadingplugin attribute
    }

}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

sourceSets { main.java.srcDirs += 'src/main/kotlin' }
idea {
    module {
        inheritOutputDirs = true
        sourceDirs += file('src/test/java')
        sourceDirs += file('src/test/resources')
    }
    project {
        languageLevel = '1.8'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

dokka {
    includes = ['Module.md']

    linkMapping {
        dir = "src/main/java"
        url = "https://github.com/TeamWizardry/LibrarianLib/tree/master/src/main/java"
        suffix = "#L"
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/dokkaJavadoc"
}
//
//uploadArchives {
//	repositories {
//		mavenDeployer {
//			repository(url: "file://" + System.getenv("bamboo_local_maven"))
//			pom {
//				groupId = project.group
//				version
//				artifactId = project.archivesBaseName
//				project {
//					name project.archivesBaseName
//					packaging 'jar'
//					description 'LibrarianLib'
//					url 'https://github.com/TeamWizardry/LibrarianLib'
//					scm {
//						url 'https://github.com/TeamWizardry/LibrarianLib.git'
//						connection 'scm:git:git@github.com:TeamWizardry/LibrarianLib.git'
//						developerConnection 'scm:git:git@github.com:TeamWizardry/LibrarianLib.git'
//					}
//					issueManagement {
//						system 'github'
//						url 'https://github.com/TeamWizardry/LibrarianLib/issues'
//					}
//					developers {
//						developer {
//							id 'thecodewarrior'
//							name 'thecodewarrior'
//							roles { role 'developer' }
//						}
//						developer {
//							id 'wiresegal'
//							name 'wiresegal'
//							roles { role 'developer' }
//						}
//                        developer {
//                            id 'eladkay'
//                            name 'eladkay'
//                            roles { role 'developer' }
//                        }
//					}
//				}
//			}
//		}
//	}
//}
